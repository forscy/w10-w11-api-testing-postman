{
  "info": {
    "_postman_id": "d516cb55-ab0f-4bff-ae5a-27afa8c90f06",
    "name": "Restful Booker API Tests",
    "description": "Collection for testing the Restful Booker API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Auth - Get Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Ambil token dari respons",
                  "var jsonData = pm.response.json();",
                  "if (jsonData.token) {",
                  "    pm.environment.set(\"authToken\", jsonData.token);",
                  "    ",
                  "    // Set expiry (24 jam)",
                  "    const expiryTimestamp = new Date().getTime() + (24 * 60 * 60 * 1000);",
                  "    pm.environment.set(\"tokenExpires\", expiryTimestamp);",
                  "    ",
                  "    console.log(\"Token berhasil disimpan: \" + jsonData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth"
              ]
            },
            "description": "Get authentication token for the Restful Booker API"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Booking Tests",
      "item": [
        {
          "name": "C-001: Create booking with valid Content-Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test C-001: Verify status code",
                  "pm.test(\"C-001: Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verify response structure",
                  "pm.test(\"C-001: Response has booking ID and details\", () => {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property(\"bookingid\");",
                  "    pm.expect(responseJson).to.have.property(\"booking\");",
                  "});",
                  "",
                  "// Save booking ID for future tests",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.bookingid) {",
                  "    pm.environment.set(\"bookingId\", responseJson.bookingid);",
                  "    console.log(\"Booking created with ID: \" + responseJson.bookingid);",
                  "}",
                  "",
                  "// Verify booking details",
                  "pm.test(\"C-001: Booking details are correct\", () => {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.booking.firstname).to.equal(\"Jim\");",
                  "    pm.expect(responseJson.booking.lastname).to.equal(\"Brown\");",
                  "    pm.expect(responseJson.booking.totalprice).to.equal(111);",
                  "    pm.expect(responseJson.booking.depositpaid).to.be.true;",
                  "    pm.expect(responseJson.booking.bookingdates.checkin).to.equal(\"2025-05-20\");",
                  "    pm.expect(responseJson.booking.bookingdates.checkout).to.equal(\"2025-05-25\");",
                  "    pm.expect(responseJson.booking.additionalneeds).to.equal(\"Breakfast\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"Jim\",\n  \"lastname\": \"Brown\",\n  \"totalprice\": 111,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-20\",\n    \"checkout\": \"2025-05-25\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Create a booking with valid Content-Type header"
          },
          "response": []
        },
        {
          "name": "C-002: Create booking with valid Accept header",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test C-002: Verify status code",
                  "pm.test(\"C-002: Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verify response structure",
                  "pm.test(\"C-002: Response has booking ID and details\", () => {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property(\"bookingid\");",
                  "    pm.expect(responseJson).to.have.property(\"booking\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"Jane\",\n  \"lastname\": \"Smith\",\n  \"totalprice\": 222,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-06-01\",\n    \"checkout\": \"2025-06-10\"\n  },\n  \"additionalneeds\": \"Dinner\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Create a booking with valid Accept header"
          },
          "response": []
        },
        {
          "name": "C-003: Create booking with invalid Content-Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test C-003: Should reject invalid content type",
                  "pm.test(\"C-003: Status code indicates error for invalid Content-Type\", () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 415, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "Data booking dalam format teks"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Create a booking with invalid Content-Type header"
          },
          "response": []
        },
        {
          "name": "C-004: Create booking with invalid Accept header",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test C-004: API may not validate Accept header strictly",
                  "pm.test(\"C-004: Response received\", () => {",
                  "    pm.response.to.not.have.status(0);",
                  "});",
                  "",
                  "if (pm.response.code === 406) {",
                  "    pm.test(\"C-004: Status code is 406 Not Acceptable\", () => {",
                  "        pm.response.to.have.status(406);",
                  "    });",
                  "} else {",
                  "    // Some APIs ignore invalid Accept headers",
                  "    console.log(\"API accepted the request despite invalid Accept header\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"Test\",\n  \"lastname\": \"User\",\n  \"totalprice\": 150,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-20\",\n    \"checkout\": \"2025-05-25\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Create a booking with invalid Accept header"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Delete Booking Tests",
      "item": [
        {
          "name": "D-001: Delete booking with valid token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test D-001: Verify status code",
                  "pm.test(\"D-001: Status code is 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Verify response is empty",
                  "pm.test(\"D-001: Response body is empty\", () => {",
                  "    pm.response.to.have.body(\"\");",
                  "});",
                  "",
                  "// Verify booking was deleted",
                  "setTimeout(() => {",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get(\"baseUrl\") + \"/booking/\" + pm.environment.get(\"bookingId\"),",
                  "        method: \"GET\"",
                  "    }, (err, res) => {",
                  "        pm.test(\"D-001: Booking no longer exists\", () => {",
                  "            pm.expect(res.code).to.equal(404);",
                  "        });",
                  "    });",
                  "}, 500);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/{{bookingId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "{{bookingId}}"
              ]
            },
            "description": "Delete a booking with valid token"
          },
          "response": []
        },
        {
          "name": "D-003: Delete booking with invalid token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test D-003: Verify status code for invalid token",
                  "pm.test(\"D-003: Status code is 403 for invalid token\", () => {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token=invalid_token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/{{bookingId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "{{bookingId}}"
              ]
            },
            "description": "Delete a booking with invalid token"
          },
          "response": []
        },
        {
          "name": "D-004: Delete booking without authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test D-004: Verify status code for missing authentication",
                  "pm.test(\"D-004: Status code is 403 for missing authentication\", () => {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/{{bookingId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "{{bookingId}}"
              ]
            },
            "description": "Delete a booking without authentication"
          },
          "response": []
        },
        {
          "name": "D-006: Delete booking with non-existent ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test D-006: Verify status code for non-existent booking",
                  "pm.test(\"D-006: Status code is 404 for non-existent booking\", () => {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/9999999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "9999999"
              ]
            },
            "description": "Delete a booking with non-existent ID"
          },
          "response": []
        },
        {
          "name": "D-007: Delete booking with ID = 0",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test D-007: Verify status code for ID = 0",
                  "pm.test(\"D-007: Status code is 404 or 405 for ID = 0\", () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 405]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/0",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "0"
              ]
            },
            "description": "Delete a booking with ID = 0"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Ensure we have a valid token before running delete tests",
              "// This is important because delete operations require authentication"
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check if token exists and is still valid",
          "if (!pm.environment.get(\"authToken\") || !pm.environment.get(\"tokenExpires\") || pm.environment.get(\"tokenExpires\") < new Date().getTime()) {",
          "    console.log(\"Token tidak ada atau sudah expired, mendapatkan token baru...\");",
          "    ",
          "    const authRequest = {",
          "        url: pm.environment.get(\"baseUrl\") + \"/auth\",",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/json'",
          "        },",
          "        body: {",
          "            mode: 'raw',",
          "            raw: JSON.stringify({",
          "                username: \"admin\",",
          "                password: \"password123\"",
          "            })",
          "        }",
          "    };",
          "",
          "    pm.sendRequest(authRequest, (err, res) => {",
          "        if (err) {",
          "            console.error(err);",
          "        } else {",
          "            try {",
          "                const responseJson = res.json();",
          "                if (responseJson.token) {",
          "                    pm.environment.set(\"authToken\", responseJson.token);",
          "                    ",
          "                    // Set expiry (24 jam)",
          "                    const expiryTimestamp = new Date().getTime() + (24 * 60 * 60 * 1000);",
          "                    pm.environment.set(\"tokenExpires\", expiryTimestamp);",
          "                    ",
          "                    console.log(\"Token otomatis diperbarui: \" + responseJson.token);",
          "                }",
          "            } catch (e) {",
          "                console.error(\"Error parsing auth response: \", e);",
          "            }",
          "        }",
          "    });",
          "}"
        ]
      }
    }
  ]
}