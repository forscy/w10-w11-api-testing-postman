{
  "info": {
    "_postman_id": "d516cb55-ab0f-4bff-ae5a-27afa8c90f06",
    "name": "Pengujian API Restful Booker",
    "description": "Collection untuk pengujian API Restful Booker berdasarkan test case dari file test-case-create.md dan test-case-delete.md",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Autentikasi",
      "item": [
        {
          "name": "Autentikasi - Dapatkan Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Ambil token dari respons",
                  "var jsonData = pm.response.json();",
                  "if (jsonData.token) {",
                  "    pm.environment.set(\"authToken\", jsonData.token);",
                  "    ",
                  "    // Set waktu kedaluwarsa (24 jam)",
                  "    const expiryTimestamp = new Date().getTime() + (24 * 60 * 60 * 1000);",
                  "    pm.environment.set(\"tokenExpires\", expiryTimestamp);",
                  "    ",
                  "    console.log(\"Token berhasil disimpan: \" + jsonData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth"
              ]
            },
            "description": "Mendapatkan token autentikasi untuk API Restful Booker"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Pengujian Pembuatan Booking",
      "item": [
        {
          "name": "C-001: Pembuatan booking dengan Content-Type valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian C-001: Verifikasi status code",
                  "pm.test(\"C-001: Status code adalah 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verifikasi struktur respons",
                  "pm.test(\"C-001: Respons memiliki booking ID dan detail\", () => {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property(\"bookingid\");",
                  "    pm.expect(responseJson).to.have.property(\"booking\");",
                  "});",
                  "",
                  "// Simpan booking ID untuk pengujian berikutnya",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.bookingid) {",
                  "    pm.environment.set(\"bookingId\", responseJson.bookingid);",
                  "    console.log(\"Booking dibuat dengan ID: \" + responseJson.bookingid);",
                  "}",
                  "",
                  "// Verifikasi detail booking",
                  "pm.test(\"C-001: Detail booking sudah benar\", () => {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.booking.firstname).to.equal(\"Jim\");",
                  "    pm.expect(responseJson.booking.lastname).to.equal(\"Brown\");",
                  "    pm.expect(responseJson.booking.totalprice).to.equal(111);",
                  "    pm.expect(responseJson.booking.depositpaid).to.be.true;",
                  "    pm.expect(responseJson.booking.bookingdates.checkin).to.equal(\"2025-05-20\");",
                  "    pm.expect(responseJson.booking.bookingdates.checkout).to.equal(\"2025-05-25\");",
                  "    pm.expect(responseJson.booking.additionalneeds).to.equal(\"Breakfast\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"Jim\",\n  \"lastname\": \"Brown\",\n  \"totalprice\": 111,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-20\",\n    \"checkout\": \"2025-05-25\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Membuat booking dengan header Content-Type yang valid"
          },
          "response": []
        },
        {
          "name": "C-002: Pembuatan booking dengan Accept header valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian C-002: Verifikasi status code",
                  "pm.test(\"C-002: Status code adalah 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verifikasi struktur respons",
                  "pm.test(\"C-002: Respons memiliki booking ID dan detail\", () => {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property(\"bookingid\");",
                  "    pm.expect(responseJson).to.have.property(\"booking\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"Jim\",\n  \"lastname\": \"Brown\",\n  \"totalprice\": 111,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-20\",\n    \"checkout\": \"2025-05-25\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Membuat booking dengan header Accept yang valid"
          },
          "response": []
        },
        {
          "name": "C-003: Pembuatan booking dengan Content-Type tidak valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian C-003: Seharusnya menolak content type yang tidak valid",
                  "pm.test(\"C-003: Status code menunjukkan error untuk Content-Type tidak valid\", () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 415, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "Data booking dalam format teks"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Membuat booking dengan header Content-Type yang tidak valid"
          },
          "response": []
        },
        {
          "name": "C-006: Pembuatan booking dengan nama depan kosong",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian C-006: Nama depan kosong seharusnya ditolak",
                  "pm.test(\"C-006: Nama depan kosong seharusnya menyebabkan error\", () => {",
                  "    // API mungkin mengembalikan status code berbeda tergantung implementasi",
                  "    // Beberapa API memvalidasi dan mengembalikan 400, yang lain tetap membuat dengan nilai kosong",
                  "    if (pm.response.code === 400) {",
                  "        pm.response.to.have.status(400);",
                  "    } else if (pm.response.code === 200) {",
                  "        console.log(\"API menerima firstname kosong - bukan perilaku yang ideal\");",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.booking.firstname).to.equal(\"\");",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"Brown\",\n  \"totalprice\": 111,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-20\",\n    \"checkout\": \"2025-05-25\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Membuat booking dengan firstname kosong"
          },
          "response": []
        },
        {
          "name": "C-011: Pembuatan booking dengan harga total negatif",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian C-011: Harga negatif seharusnya ditolak",
                  "pm.test(\"C-011: Harga negatif seharusnya menyebabkan error\", () => {",
                  "    // API mungkin mengembalikan status code berbeda tergantung implementasi",
                  "    if (pm.response.code === 400) {",
                  "        pm.response.to.have.status(400);",
                  "    } else if (pm.response.code === 200) {",
                  "        console.log(\"API menerima harga negatif - bukan perilaku yang ideal\");",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.booking.totalprice).to.equal(-1);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstname\": \"Jim\",\n  \"lastname\": \"Brown\",\n  \"totalprice\": -1,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-20\",\n    \"checkout\": \"2025-05-25\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking"
              ]
            },
            "description": "Membuat booking dengan harga total negatif"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Pengujian Penghapusan Booking",
      "item": [
        {
          "name": "D-001: Menghapus booking dengan autentikasi token valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian D-001: Verifikasi status code",
                  "pm.test(\"D-001: Status code adalah 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Verifikasi respons kosong",
                  "pm.test(\"D-001: Response body kosong\", () => {",
                  "    pm.response.to.have.body(\"\");",
                  "});",
                  "",
                  "// Verifikasi booking sudah dihapus",
                  "setTimeout(() => {",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get(\"baseUrl\") + \"/booking/\" + pm.environment.get(\"bookingId\"),",
                  "        method: \"GET\"",
                  "    }, (err, res) => {",
                  "        pm.test(\"D-001: Booking tidak lagi ada\", () => {",
                  "            pm.expect(res.code).to.equal(404);",
                  "        });",
                  "    });",
                  "}, 500);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/{{bookingId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "{{bookingId}}"
              ]
            },
            "description": "Menghapus booking dengan token yang valid"
          },
          "response": []
        },
        {
          "name": "D-002: Menghapus booking dengan autentikasi Basic Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian D-002: Verifikasi status code",
                  "pm.test(\"D-002: Status code adalah 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Verifikasi respons kosong",
                  "pm.test(\"D-002: Response body kosong\", () => {",
                  "    pm.response.to.have.body(\"\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Basic YWRtaW46cGFzc3dvcmQxMjM="
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "1"
              ]
            },
            "description": "Menghapus booking dengan Basic Auth"
          },
          "response": []
        },
        {
          "name": "D-003: Menghapus booking dengan token tidak valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian D-003: Verifikasi status code untuk token tidak valid",
                  "pm.test(\"D-003: Status code adalah 403 untuk token tidak valid\", () => {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token=invalid_token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "1"
              ]
            },
            "description": "Menghapus booking dengan token tidak valid"
          },
          "response": []
        },
        {
          "name": "D-004: Menghapus booking tanpa menyertakan autentikasi",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian D-004: Verifikasi status code untuk autentikasi yang tidak disertakan",
                  "pm.test(\"D-004: Status code adalah 403 untuk autentikasi yang tidak disertakan\", () => {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "1"
              ]
            },
            "description": "Menghapus booking tanpa menyertakan autentikasi"
          },
          "response": []
        },
        {
          "name": "D-006: Menghapus booking dengan ID yang tidak tersedia",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Pengujian D-006: Verifikasi status code untuk booking yang tidak ada",
                  "pm.test(\"D-006: Status code adalah 404 untuk booking yang tidak ada\", () => {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/booking/9999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "booking",
                "9999"
              ]
            },
            "description": "Menghapus booking dengan ID yang tidak tersedia"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Periksa apakah token ada dan masih valid",
          "if (!pm.environment.get(\"authToken\") || !pm.environment.get(\"tokenExpires\") || pm.environment.get(\"tokenExpires\") < new Date().getTime()) {",
          "    console.log(\"Token tidak ada atau sudah expired, mendapatkan token baru...\");",
          "    ",
          "    const authRequest = {",
          "        url: pm.environment.get(\"baseUrl\") + \"/auth\",",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/json'",
          "        },",
          "        body: {",
          "            mode: 'raw',",
          "            raw: JSON.stringify({",
          "                username: \"admin\",",
          "                password: \"password123\"",
          "            })",
          "        }",
          "    };",
          "",
          "    pm.sendRequest(authRequest, (err, res) => {",
          "        if (err) {",
          "            console.error(err);",
          "        } else {",
          "            try {",
          "                const responseJson = res.json();",
          "                if (responseJson.token) {",
          "                    pm.environment.set(\"authToken\", responseJson.token);",
          "                    ",
          "                    // Set waktu kedaluwarsa (24 jam)",
          "                    const expiryTimestamp = new Date().getTime() + (24 * 60 * 60 * 1000);",
          "                    pm.environment.set(\"tokenExpires\", expiryTimestamp);",
          "                    ",
          "                    console.log(\"Token otomatis diperbarui: \" + responseJson.token);",
          "                }",
          "            } catch (e) {",
          "                console.error(\"Error saat parsing respons autentikasi: \", e);",
          "            }",
          "        }",
          "    });",
          "}"
        ]
      }
    }
  ]
}