{
	"info": {
		"_postman_id": "6afae189-9733-4b8a-9b6c-8af63ac54c18",
		"name": "Pengujian API GET Booking Restful Booker",
		"description": "Collection untuk pengujian API GET Booking pada Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26572425",
		"_collection_link": "https://www.postman.com/a61111/workspace/a6-restful-booker/collection/26572425-6afae189-9733-4b8a-9b6c-8af63ac54c18?action=share&source=collection_link&creator=26572425"
	},
	"item": [
		{
			"name": "Autentikasi",
			"item": [
				{
					"name": "Autentikasi - Dapatkan Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ambil token dari respons",
									"var jsonData = pm.response.json();",
									"if (jsonData.token) {",
									"    pm.environment.set(\"authToken\", jsonData.token);",
									"    ",
									"    // Set waktu kedaluwarsa (24 jam)",
									"    const expiryTimestamp = new Date().getTime() + (24 * 60 * 60 * 1000);",
									"    pm.environment.set(\"tokenExpires\", expiryTimestamp);",
									"    ",
									"    console.log(\"Token berhasil disimpan: \" + jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Mendapatkan token autentikasi untuk API Restful Booker"
					},
					"response": []
				}
			]
		},
		{
			"name": "Pengujian GET Booking",
			"item": [
				{
					"name": "Setup - Create Booking untuk Testing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifikasi status code",
									"pm.test(\"Status code adalah 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Simpan booking ID untuk test berikutnya",
									"const responseJson = pm.response.json();",
									"if (responseJson.bookingid) {",
									"    pm.environment.set(\"validBookingId\", responseJson.bookingid);",
									"    console.log(\"Booking untuk testing dibuat dengan ID: \" + responseJson.bookingid);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"GetTest\",\n  \"lastname\": \"User\",\n  \"totalprice\": 150,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-18\",\n    \"checkout\": \"2025-05-25\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Membuat booking baru untuk digunakan dalam pengujian GET"
					},
					"response": []
				},
				{
					"name": "TC21: GET booking dengan Id valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TC21: Verifikasi status code",
									"pm.test(\"TC21: Status code adalah 200 OK\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verifikasi struktur response",
									"pm.test(\"TC21: Response memiliki struktur yang benar\", () => {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Verifikasi bahwa semua field yang diharapkan ada dalam response",
									"    pm.expect(responseJson).to.have.property(\"firstname\");",
									"    pm.expect(responseJson).to.have.property(\"lastname\");",
									"    pm.expect(responseJson).to.have.property(\"totalprice\");",
									"    pm.expect(responseJson).to.have.property(\"depositpaid\");",
									"    pm.expect(responseJson).to.have.property(\"bookingdates\");",
									"    pm.expect(responseJson.bookingdates).to.have.property(\"checkin\");",
									"    pm.expect(responseJson.bookingdates).to.have.property(\"checkout\");",
									"});",
									"",
									"// Verifikasi data booking sesuai dengan yang diharapkan",
									"const responseJson = pm.response.json();",
									"if (responseJson.firstname === \"GetTest\") {",
									"    pm.test(\"TC21: Data booking sesuai dengan yang dibuat\", () => {",
									"        pm.expect(responseJson.firstname).to.equal(\"GetTest\");",
									"        pm.expect(responseJson.lastname).to.equal(\"User\");",
									"    });",
									"} else {",
									"    console.log(\"Booking yang diambil adalah booking lain dengan ID valid\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{validBookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{validBookingId}}"
							]
						},
						"description": "Mengambil detail booking dengan ID yang valid dan tersedia dalam database"
					},
					"response": []
				},
				{
					"name": "TC21 (Alt): GET booking dengan Id = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TC21 (Alt): Verifikasi status code",
									"pm.test(\"TC21 (Alt): Status code adalah 200 OK atau 404 jika ID tidak ditemukan\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"    ",
									"    if (pm.response.code === 200) {",
									"        console.log(\"Booking dengan ID 1 ditemukan\");",
									"        ",
									"        // Verifikasi struktur response",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property(\"firstname\");",
									"        pm.expect(responseJson).to.have.property(\"lastname\");",
									"        pm.expect(responseJson).to.have.property(\"totalprice\");",
									"        pm.expect(responseJson).to.have.property(\"depositpaid\");",
									"        pm.expect(responseJson).to.have.property(\"bookingdates\");",
									"    } else {",
									"        console.log(\"Booking dengan ID 1 tidak ditemukan - test ini bersifat informatif saja\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"1"
							]
						},
						"description": "Mengambil detail booking dengan ID = 1 (test alternatif jika ID dinamis tidak tersedia)"
					},
					"response": []
				},
				{
					"name": "TC22: GET booking dengan Id valid tapi tidak ada dalam database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TC22: Verifikasi status code",
									"pm.test(\"TC22: Status code adalah 404 Not Found\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verifikasi pesan error",
									"pm.test(\"TC22: Response menunjukkan Not Found\", () => {",
									"    // Restful Booker API mungkin tidak selalu mengembalikan pesan error yang konsisten",
									"    // Kita hanya memeriksa status code 404",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"9999"
							]
						},
						"description": "Mengambil detail booking dengan ID yang valid formatnya tapi tidak ada dalam database"
					},
					"response": []
				},
				{
					"name": "TC23: GET booking dengan Id string kosong",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TC23: Verifikasi request dengan id string kosong",
									"pm.test(\"TC23: Response menunjukkan error untuk ID string kosong\", () => {",
									"    // API restful-booker mungkin memberikan respons yang berbeda untuk ID kosong",
									"    // 400 Bad Request",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								""
							]
						},
						"description": "Mengambil detail booking dengan ID string kosong"
					},
					"response": []
				},
				{
					"name": "TC24: GET booking dengan Id berupa huruf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TC24: Verifikasi request dengan id berupa huruf",
									"pm.test(\"TC24: Response menunjukkan error untuk ID berupa huruf\", () => {",
									"    // Berdasarkan API contract, ini seharusnya 400 Bad Request",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/a",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"a"
							]
						},
						"description": "Mengambil detail booking dengan ID berupa huruf"
					},
					"response": []
				},
				{
					"name": "TC25: GET booking dengan Id berupa simbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TC25: Verifikasi request dengan id berupa simbol",
									"pm.test(\"TC25: Response menunjukkan error untuk ID berupa simbol\", () => {",
									"    // Berdasarkan API contract, ini seharusnya 400 Bad Request",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/!",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"!"
							]
						},
						"description": "Mengambil detail booking dengan ID berupa simbol"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Periksa apakah baseUrl tersedia",
					"if (!pm.environment.get(\"baseUrl\")) {",
					"    console.log(\"Setting baseUrl as environment variable\");",
					"    pm.environment.set(\"baseUrl\", \"https://restful-booker.herokuapp.com\");",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		}
	]
}